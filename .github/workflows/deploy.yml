name: Deploy to VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Generate Prisma client
      run: npx prisma generate
    
    - name: Run type check
      run: yarn run build
    
    - name: Run linter
      run: yarn run lint

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Create nginx network if it doesn't exist
          docker network create nginx 2>/dev/null || true
          
          # Navigate to project directory
          cd /opt/cardapio-20210
          
          # Pull latest changes
          git pull origin main
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          docker pull ghcr.io/${{ github.repository }}:latest
          
          # Stop and remove old containers
          docker-compose down --remove-orphans
          
          # Start new containers
          docker-compose up -d
          
          # Run database migrations
          docker-compose exec -T app npx prisma migrate deploy
          
          # Seed database if needed
          docker-compose exec -T app npx prisma db seed 2>/dev/null || true
          
          # Clean up old images
          docker image prune -f
          
          # Show status
          docker-compose ps 